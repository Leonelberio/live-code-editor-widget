body {
  margin: 0;
  outline: none;
  font-family: 'M PLUS Rounded 1c', sans-serif !important;
}

*, ::after, ::before{
  box-sizing: border-box;

}


.container{
  background-color: hsl(240, 2%, 10%);
  padding: 10px;
}
.top-pane {
  background-color: hsl(225, 6%, 25%);
}

.pane {
  height: 50vh;
  display: flex;
}

.editor-container {
  flex-grow: 1;
  flex-basis: 0;
  display: flex;
  flex-direction: column;
  padding: .5rem;
  background-color: hsl(225, 6%, 25%);
}

.export-container{
display: flex;
justify-content: space-between;
align-items: center;
color: #fff;
height: 8vh;
z-index: 100;
}

.timer{
  color: #fff;
  display: flex;
  align-items: center;
height: 100%;
}

.timer>input{
  background: none;
  border: 1px solid #5f5c5c;
  color: #fff;
  width: 150px;
  padding: .5rem;
border-radius: 10px;
margin-left: 10px;
outline: none;
  
}

.export{
  display: flex;
  padding: .5rem;
  }
  

.export-container .button{
  background: none;
  border-style: none;
  color: white;
  display: flex;
  gap: 5px;
  font-size: small;
  cursor: pointer;
}

.export-container>.button>.icon{
font-size: .9rem;

}

@media only screen and (max-width: 750px) {
  .pane{
    height: 70vh;
    flex-direction: column;
  }

  .code-mirror-wrapper {
    flex-grow: 0;
    border-bottom-right-radius: .5rem;
    border-bottom-left-radius: .5rem;
    overflow: hidden;
  }
  .editor-container{
    padding: .25rem;
    max-height: 31%;
  }
  .timer{

    display: flex;
    flex-direction: column;
    align-items: center;
  height: 100%;
  }
  /* .code-mirror-wrapper {
    flex-grow: 1;
    border-bottom-right-radius: .5rem;
    border-bottom-left-radius: .5rem;
    overflow: hidden;
  } */
}
.editor-container.collapsed {
  flex-grow: 0;
}

.editor-container.collapsed .CodeMirror-scroll {
  position: absolute;
  overflow: hidden !important;
}

.expand-collapse-btn {
  margin-left: .5rem;
  background: none;
  border: none;
  color: white;
  cursor: pointer;
}

iframe{
  background: #fff;
  border: 0;
  outline: 0;
}

.editor-title {
  display: flex;
  justify-content: space-between;
  background-color: hsl(225, 6%, 13%);
  color: white;
  padding: .5rem .5rem .5rem 1rem;
  border-top-right-radius: .5rem;
  border-top-left-radius: .5rem;
}

.CodeMirror {
  height: 100% !important;
}

.code-mirror-wrapper {

  flex-grow: 1;
  border-bottom-right-radius: .5rem;
  border-bottom-left-radius: .5rem;
  overflow: hidden;
}

/* #autodestroy {
  position: absolute;
  /* z-index: 2; */
  /* inset: 0px;
  width: 100%;
  height: 100%;
  opacity: 0; */
/* }  */

/* input[type="checkbox"] {
  background-color: blue;
  cursor: default;
  appearance: auto;
  box-sizing: border-box;
  margin: 3px 3px 3px 4px;
  padding: initial;
  border: initial;
} */





  @supports (-webkit-appearance: none) or (-moz-appearance: none) {
    .checkbox-wrapper-13 input[type=checkbox] {
      --active: #275EFE;
      --active-inner: #fff;
      --focus: 2px rgba(39, 94, 254, .3);
      --border: #BBC1E1;
      --border-hover: #275EFE;
      --background: #fff;
      --disabled: #F6F8FF;
      --disabled-inner: #E1E6F9;
      -webkit-appearance: none;
      -moz-appearance: none;
      height: 21px;
      outline: none;
      display: inline-block;
      vertical-align: top;
      position: relative;
      margin: 0;
      cursor: pointer;
      border: 1px solid var(--bc, var(--border));
      background: var(--b, var(--background));
      transition: background 0.3s, border-color 0.3s, box-shadow 0.2s;
    }
    .checkbox-wrapper-13 input[type=checkbox]:after {
      content: "";
      display: block;
      left: 0;
      top: 0;
      position: absolute;
      transition: transform var(--d-t, 0.3s) var(--d-t-e, ease), opacity var(--d-o, 0.2s);
    }
    .checkbox-wrapper-13 input[type=checkbox]:checked {
      --b: var(--active);
      --bc: var(--active);
      --d-o: .3s;
      --d-t: .6s;
      --d-t-e: cubic-bezier(.2, .85, .32, 1.2);
    }
    .checkbox-wrapper-13 input[type=checkbox]:disabled {
      --b: var(--disabled);
      cursor: not-allowed;
      opacity: 0.9;
    }
    .checkbox-wrapper-13 input[type=checkbox]:disabled:checked {
      --b: var(--disabled-inner);
      --bc: var(--border);
    }
    .checkbox-wrapper-13 input[type=checkbox]:disabled + label {
      cursor: not-allowed;
    }
    .checkbox-wrapper-13 input[type=checkbox]:hover:not(:checked):not(:disabled) {
      --bc: var(--border-hover);
    }
    .checkbox-wrapper-13 input[type=checkbox]:focus {
      box-shadow: 0 0 0 var(--focus);
    }
    .checkbox-wrapper-13 input[type=checkbox]:not(.switch) {
      width: 21px;
    }
    .checkbox-wrapper-13 input[type=checkbox]:not(.switch):after {
      opacity: var(--o, 0);
    }
    .checkbox-wrapper-13 input[type=checkbox]:not(.switch):checked {
      --o: 1;
    }
    .checkbox-wrapper-13 input[type=checkbox] + label {
      display: inline-block;
      vertical-align: middle;
      cursor: pointer;
      margin-left: 4px;
    }

    .checkbox-wrapper-13 input[type=checkbox]:not(.switch) {
      border-radius: 7px;
    }
    .checkbox-wrapper-13 input[type=checkbox]:not(.switch):after {
      width: 5px;
      height: 9px;
      border: 2px solid var(--active-inner);
      border-top: 0;
      border-left: 0;
      left: 7px;
      top: 4px;
      transform: rotate(var(--r, 20deg));
    }
    .checkbox-wrapper-13 input[type=checkbox]:not(.switch):checked {
      --r: 43deg;
    }
  }

  .checkbox-wrapper-13 * {
    box-sizing: inherit;

  }
  .checkbox-wrapper-13 *:before,
  .checkbox-wrapper-13 *:after {
    box-sizing: inherit;
  }


  .checkbox-wrapper-13 {
    margin-left: 20px;
    margin-right: 20px;

  }



  .playstopbutton {
    all: unset;
width: 17px;
height: 17px;
    display: inline-block;
    position: "relative";
    padding: 12px;
    color: white;
    text-transform: uppercase;
    font-family: sans-serif;
    letter-spacing: 1.5px;
    font-weight: bold;
    cursor: pointer;
    border-radius: 50%;
    text-align: center;
  /* &.button { */
    background-color: #58cc02;
    box-shadow: 0 5px #58a700;
    font-size: 15px;
  }

  .playstopbutton :active {
    box-shadow: none;
    transform: translateY(5px);
  }